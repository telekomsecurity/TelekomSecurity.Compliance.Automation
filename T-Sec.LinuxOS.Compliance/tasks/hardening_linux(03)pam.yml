---
# ------------------------------------------------------------------------
# Telekom Security - Compliance Automation - Hardening
# Linux OS for Servers (3.65)
# Tasks: 03 PAM
# ------------------------------------------------------------------------

# Req 44:	If PAM is used, an appropriate hashing function must be configured for
# password protection for PAM.

- name: req-044.1 configure password hashing for pam (Ubuntu)
  pamd:
    name: common-password
    type: password
    control: '[success=1 default=ignore]'
    module_path: pam_unix.so
    module_arguments:
      - '{{ password_hashing }}'
      - 'rounds={{ hashing_rounds }}'
    state: args_present
  when: config_pam_password_complexity and ansible_distribution == "Ubuntu"

- name: req-044.2 configure password hashing for pam (RedHat)
  pamd:
    name: "{{ item }}"
    type: password
    control: sufficient
    module_path: pam_unix.so
    module_arguments:
      - '{{ password_hashing }}'
      - 'rounds={{ hashing_rounds }}'
      - shadow
      - nullok
      - try_first_pass
      - use_authtok
    state: updated
  with_items:
    - "password-auth"
    - "system-auth"
  when: config_pam_password_complexity and ansible_os_family == "RedHat"

# Req 45:	If PAM is used, password rules must be configured for PAM to force the
# use of passwords with a minimum length of 8 characters and a combination of three
# out of the following categories: upper cases, lower case, numbers and special
# characters.

- name: req-045.1 uninstall outdated pam-cracklib
  package:
    name: '{{ os_pam_cracklib }}'
    state: absent
  when: config_pam_password_rules|bool

- name: req-045.2 install 'libpam-pwquality' (Ubuntu)
  package:
    name: 'libpam-pwquality'
    state: present
  when: config_pam_password_rules and ansible_distribution == "Ubuntu"

- name: req-045.3 configure password pwquality for pam
  pamd:
    name: "{{ item }}"
    type: password
    control: requisite
    module_path: pam_pwquality.so
    module_arguments:
      - retry=3
    state: args_present
  with_items: "{{ os_pamd_config_files }}"
  when: config_pam_password_rules|bool

- name: req-045.4 configure password rules
  template:
    src: pwquality-conf.j2
    dest: '/etc/security/pwquality.conf'
    owner: root
    group: root
    mode: 0644
  when: config_pam_password_rules|bool

# Req 46:	If PAM is used, a protection against brute force and dictionary attacks
# that hinder pass-word guessing must be configured in PAM.

- name: req-046.1 configure pam_tally2.so (Ubuntu)
  pamd:
    name: common-auth
    type: auth
    control: '[success=1 default=ignore]'
    module_path: pam_unix.so
    new_type: auth
    new_control: required
    new_module_path: pam_tally2.so
    module_arguments:
      - onerr=fail
      - audit
      - silent
      - 'deny={{ failed_login_attemps }}'
      - 'unlock_time={{ unlock_time }}'
    state: before
  when: config_pam_account_locking and ansible_distribution == "Ubuntu"

- name: req-046.2 configure line 1 for pam_faillock.so (RedHat)
  pamd:
    name: "{{ item }}"
    type: auth
    control: required
    module_path: pam_env.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments:
      - silent
      - audit
      - 'deny={{ failed_login_attemps }}'
      - 'unlock_time={{ unlock_time }}'
    state: after
  with_items:
    - "password-auth"
    - "system-auth"
  when: config_pam_account_locking and ansible_os_family == "RedHat"

- name: req-046.3 configure line 2 for pam_faillock.so (RedHat)
  pamd:
    name: "{{ item }}"
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments:
      - silent
      - authfail
      - 'deny={{ failed_login_attemps }}'
      - 'unlock_time={{ unlock_time }}'
    state: after
  with_items:
    - "password-auth"
    - "system-auth"
  when: config_pam_account_locking and ansible_os_family == "RedHat"

- name: req-046.4 configure line 3 for pam_faillock.so (RedHat)
  pamd:
    name: "{{ item }}"
    type: account
    control: required
    module_path: pam_permit.so
    new_type: account
    new_control: required
    new_module_path: pam_faillock.so
    state: after
  with_items:
    - "password-auth"
    - "system-auth"
  when: config_pam_account_locking and ansible_os_family == "RedHat"

# Req 47:	If PAM is used , PAM must be configured that motd did not contain any
# sensitive data.

- name: req-047.1 disable update-motd.d (Ubuntu)
  replace:
    dest: '{{ item }}'
    regexp: '^session\ +optional\ +pam_motd.so*'
    replace: '# session  optional  pam_motd.so'
  with_items:
    - "/etc/pam.d/login"
    - "/etc/pam.d/sshd"
  when: config_pam_motd and ansible_distribution == "Ubuntu"
